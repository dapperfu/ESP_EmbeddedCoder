%% File : espidf_uart.tlc
%implements  espidf_uart "C"

%% Function: BlockInstanceSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockInstanceSetup(block, system) Output
%endfunction

%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    %<LibAddToCommonIncludes("driver/uart.h")>
%endfunction

%% Function: Enable =============================================================
%%
%function Enable(block, system) Output
%endfunction

%% Function: Disable =============================================================
%%
%function Disable(block, system) Output
%endfunction

%% InitializeConditions: Start =============================================================
%%
%function InitializeConditions(block, system) Output
    /* 
        InitializeConditions espidf uart:
        %<Name> 
        %<Identifier>
    */
    %assign buffer = "uart_buffer_size%<Identifier>"
    // Setup UART buffered IO with event queue
    const int %<buffer> = (1024 * 2);
    QueueHandle_t uart_queue;
    // Install UART driver using an event queue here
    ESP_ERROR_CHECK(uart_driver_install(UART_NUM_2, %<buffer>, %<buffer>, 10, &uart_queue, 0));
%endfunction

%% Function: Start =============================================================
%%
%function Start(block, system) Output
    /* 
        start: espidf uart
        %<Name> 
        %<Identifier>
    */
const int uart_buffer_size = (1024 * 2);
QueueHandle_t uart_queue;
// Install UART driver using an event queue here
ESP_ERROR_CHECK(
    uart_driver_install(
        UART_NUM_2,
        uart_buffer_size,
        uart_buffer_size,
        10,
        &uart_queue,
        0)
);
%endfunction

%% Function: Outputs ==========================================================
%%openfile
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
    /* 
        output:espidf uart
        %<Name> 
        %<Identifier>
    */
    char* test_str = "This is a test string.\n";
    uart_write_bytes(uart_num, (const char*)test_str, strlen(test_str));
%endfunction

%% Function: Update =============================================================
%%
%function Update(block, system) Output
    /* update: espidf uart: %<Name>  %<Identifier>*/
%endfunction


%% Function: Terminate =============================================================
%%
%function Derivatives(block, system) Output
%endfunction

%% Function: Terminate =============================================================
%%
%function Terminate(block, system) Output
    /*
        terminate: espidf uart
        %<Name>
        %<Identifier>
    */
    uart_driver_delete();
%endfunction
